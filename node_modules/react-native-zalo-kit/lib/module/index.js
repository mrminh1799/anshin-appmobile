import { NativeModules, Platform } from 'react-native';
import { Constants } from './types';
const LINKING_ERROR = `The package 'react-native-zalo-kit' doesn't seem to be linked. Make sure: \n\n` + Platform.select({
  ios: "- You have run 'pod install'\n",
  default: ''
}) + '- You rebuilt the app after installing the package\n' + '- You are not using Expo managed workflow\n';
const ZaloKit = NativeModules.ZaloKit ? NativeModules.ZaloKit : new Proxy({}, {
  get() {
    throw new Error(LINKING_ERROR);
  }

});

const login = async function () {
  let authType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Constants.AUTH_VIA_APP_OR_WEB;
  const AUTH_TYPES = [Constants.AUTH_VIA_APP, Constants.AUTH_VIA_APP_OR_WEB, Constants.AUTH_VIA_WEB];
  const AUTH_TYPE_KEYS = AUTH_TYPES.map(key => {
    return Constants[key];
  });

  if (!AUTH_TYPES.includes(authType)) {
    throw new Error(`"authType" must be one of [${AUTH_TYPE_KEYS.join(', ')}]`);
  }

  return ZaloKit.login(authType);
};

const register = ZaloKit.register;
const logout = ZaloKit.logout;
const isAuthenticated = ZaloKit.isAuthenticated;
const getUserProfile = ZaloKit.getUserProfile;

const getApplicationHashKey = () => {
  if (Platform.OS === 'android') {
    return ZaloKit.getApplicationHashKey();
  }

  throw new Error('This function is only supported on Android');
};

const getUserFriendList = async (offset, count) => ZaloKit.getUserFriendList(offset, count);

const getUserInvitableFriendList = async (offset, count) => ZaloKit.getUserInvitableFriendList(offset, count);

const postFeed = async (message, link) => ZaloKit.postFeed(message, link);

const sendMessage = async (friendId, link, message) => ZaloKit.sendMessage(friendId, message, link);

const inviteFriendUseApp = async (friendIds, message) => {
  if (Platform.OS === 'android') {
    return ZaloKit.inviteFriendUseApp(friendIds, message);
  }

  return ZaloKit.inviteFriendUseApp(friendIds.join(','), message);
};

const sendMessageByApp = async feedData => ZaloKit.sendMessageByApp(feedData);

const postFeedByApp = async feedData => ZaloKit.postFeedByApp(feedData);

export { Constants, getApplicationHashKey, login, logout, isAuthenticated, getUserProfile, getUserFriendList, getUserInvitableFriendList, postFeed, postFeedByApp, sendMessage, sendMessageByApp, inviteFriendUseApp, register };
export default {
  Constants,
  getApplicationHashKey,
  login,
  logout,
  isAuthenticated,
  getUserProfile,
  getUserFriendList,
  getUserInvitableFriendList,
  postFeed,
  postFeedByApp,
  sendMessage,
  sendMessageByApp,
  inviteFriendUseApp,
  register
};
//# sourceMappingURL=index.js.map
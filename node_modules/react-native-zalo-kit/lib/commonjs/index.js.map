{"version":3,"sources":["index.ts"],"names":["LINKING_ERROR","Platform","select","ios","default","ZaloKit","NativeModules","Proxy","get","Error","login","authType","Constants","AUTH_VIA_APP_OR_WEB","AUTH_TYPES","AUTH_VIA_APP","AUTH_VIA_WEB","AUTH_TYPE_KEYS","map","key","includes","join","register","logout","isAuthenticated","getUserProfile","getApplicationHashKey","OS","getUserFriendList","offset","count","getUserInvitableFriendList","postFeed","message","link","sendMessage","friendId","inviteFriendUseApp","friendIds","sendMessageByApp","feedData","postFeedByApp"],"mappings":"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","sourcesContent":["import { NativeModules, Platform } from 'react-native';\nimport {\n  Constants,\n  IUserProfile,\n  IFriendList,\n  IShareResponseObject,\n  IZaloAuthResponse,\n} from './types';\n\nconst LINKING_ERROR =\n  `The package 'react-native-zalo-kit' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo managed workflow\\n';\n\nconst ZaloKit = NativeModules.ZaloKit\n  ? NativeModules.ZaloKit\n  : new Proxy(\n      {},\n      {\n        get() {\n          throw new Error(LINKING_ERROR);\n        },\n      }\n    );\n\nconst login = async (\n  authType = Constants.AUTH_VIA_APP_OR_WEB\n): Promise<IZaloAuthResponse> => {\n  const AUTH_TYPES = [\n    Constants.AUTH_VIA_APP,\n    Constants.AUTH_VIA_APP_OR_WEB,\n    Constants.AUTH_VIA_WEB,\n  ];\n  const AUTH_TYPE_KEYS = AUTH_TYPES.map((key) => {\n    return Constants[key];\n  });\n  if (!AUTH_TYPES.includes(authType)) {\n    throw new Error(`\"authType\" must be one of [${AUTH_TYPE_KEYS.join(', ')}]`);\n  }\n\n  return ZaloKit.login(authType);\n};\n\nconst register: () => Promise<IZaloAuthResponse> = ZaloKit.register;\n\nconst logout: () => void = ZaloKit.logout;\n\nconst isAuthenticated: () => Promise<boolean> = ZaloKit.isAuthenticated;\n\nconst getUserProfile: () => Promise<IUserProfile> = ZaloKit.getUserProfile;\n\nconst getApplicationHashKey = (): string => {\n  if (Platform.OS === 'android') {\n    return ZaloKit.getApplicationHashKey();\n  }\n\n  throw new Error('This function is only supported on Android');\n};\n\nconst getUserFriendList = async (\n  offset: number,\n  count: number\n): Promise<IFriendList> => ZaloKit.getUserFriendList(offset, count);\n\nconst getUserInvitableFriendList = async (\n  offset: number,\n  count: number\n): Promise<IFriendList> => ZaloKit.getUserInvitableFriendList(offset, count);\n\nconst postFeed = async (\n  message: string,\n  link: string\n): Promise<{ id: string }> => ZaloKit.postFeed(message, link);\n\nconst sendMessage = async (\n  friendId: string,\n  link: string,\n  message: string\n): Promise<{ to: string }> => ZaloKit.sendMessage(friendId, message, link);\n\nconst inviteFriendUseApp = async (\n  friendIds: string[],\n  message: string\n): Promise<{ to: string[] }> => {\n  if (Platform.OS === 'android') {\n    return ZaloKit.inviteFriendUseApp(friendIds, message);\n  }\n  return ZaloKit.inviteFriendUseApp(friendIds.join(','), message);\n};\n\nconst sendMessageByApp = async (feedData: {\n  appName: string;\n  message: string;\n  link: string;\n  linkTitle: string;\n  linkSource: string;\n  linkDesc: string;\n  linkThumb: string[];\n  others: object;\n}): Promise<IShareResponseObject> => ZaloKit.sendMessageByApp(feedData);\n\nconst postFeedByApp = async (feedData: {\n  appName: string;\n  message: string;\n  link: string;\n  linkTitle: string;\n  linkSource: string;\n  linkDesc: string;\n  linkThumb: string[];\n  others: object;\n}): Promise<IShareResponseObject> => ZaloKit.postFeedByApp(feedData);\n\nexport {\n  Constants,\n  getApplicationHashKey,\n  login,\n  logout,\n  isAuthenticated,\n  getUserProfile,\n  getUserFriendList,\n  getUserInvitableFriendList,\n  postFeed,\n  postFeedByApp,\n  sendMessage,\n  sendMessageByApp,\n  inviteFriendUseApp,\n  register,\n};\n\nexport default {\n  Constants,\n  getApplicationHashKey,\n  login,\n  logout,\n  isAuthenticated,\n  getUserProfile,\n  getUserFriendList,\n  getUserInvitableFriendList,\n  postFeed,\n  postFeedByApp,\n  sendMessage,\n  sendMessageByApp,\n  inviteFriendUseApp,\n  register,\n};\n"]}